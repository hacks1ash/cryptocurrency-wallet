version: '3'

services:
  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - $HOME/redis/data/db:/data
    networks:
      - default

  # mongodb:
  #   image: mongo:latest
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     -  $HOME/mongodb/data/db:/data/db
  #   networks:
  #     - default

  mongo1:
    image: mongo:4.2
    container_name: mongo1
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30001"]
    volumes:
      - $HOME/mongodb/data1/db:/data/db
    ports:
      - 30001:30001
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:30001\"},{_id:1,host:\"mongo2:30002\"},{_id:2,host:\"mongo3:30003\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      interval: 10s
  #      start_period: 30s

  mongo2:
    image: mongo:4.2
    container_name: mongo2
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30002"]
    volumes:
      - $HOME/mongodb/data2/db:/data/db
    ports:
      - 30002:30002

  mongo3:
    image: mongo:4.2
    container_name: mongo3
    command: ["--replSet", "my-replica-set", "--bind_ip_all", "--port", "30003"]
    volumes:
      - $HOME/mongodb/data3/db:/data/db
    ports:
      - 30003:30003

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    ports:
      - "9200:9200"
    environment:
      discovery.type: single-node
    networks:
      - default

  #  monstache:
  #    image: monstache:latest
  #    networks:
  #      - default

  kafka:
    image: confluentinc/cp-kafka:5.0.1-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - default

  dagger:
    image: daory-dagger:latest
    depends_on:
      - kafka
      - redis
    environment:
      ENV: local
      LOG_LEVEL: info
      KAFKA_SERVERURL: kafka:19092
      REDIS_HOSTNAME: "redis"
    networks:
      - default

  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.1-1
    ports:
      - "2181:2181"
    environment:
      zk_id: "1"
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - default

  #  eventeum:
  #    image: deventeum:latest
  #    ports:
  #    - "8060:8060"
  #    depends_on:
  #      - mongo1
  #      - mongo2
  #      - mongo3
  #      - kafka
  #      - zookeeper
  #    environment:
  #      SPRING_DATA_MONGODB_URI: mongodb://mongo1:30001,mongo2:30002,mongo3:30003/daory
  #      ETHEREUM_NODE_URL: wss://kovan.infura.io/ws/v3/1703c01ec0814e7796155ff061b350a1
  #      MATIC_NODE_URL: wss://ws-mumbai.matic.today
  #      BSC_NODE_URL: https://data-seed-prebsc-1-s1.binance.org:8545/
  #      ETHEREUM_BLOCKSTRATEGY: PUBSUB
  #      CONTRACT_ADDRESS: "0x4f2379c181a0bd089916ddbf494eaa2716321ae6"
  #      CONTRACT_ADDRESS_MATIC: "0xf44375ff2596353d7c03f3880a0cef6a06b5bc7d"
  #      CONTRACT_ADDRESS_BSC: "0x581c2a0dbfe7315ef82140689aaaf1d504e9a4a4"
  #      ZOOKEEPER_ADDRESS: zookeeper:2181
  #      KAFKA_ADDRESSES: kafka:19092
  #    networks:
  #      - default

  event-listener:
    build: ./event-listener
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - kafka
      - zookeeper
      - redis
      - dagger
    environment:
      SPRING_ACTIVE_PROFILE: local
      SPRING_DATA_MONGODB_URI: mongodb://mongo1:30001,mongo2:30002,mongo3:30003/daory
      KAFKA_SERVERURL: kafka:19092
      REDIS_HOSTNAME: "redis"
    networks:
      - default

  web:
    build: ./web
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - kafka
      - zookeeper
      - redis
    environment:
      SPRING_ACTIVE_PROFILE: local
      ES_SERVERURL: elasticsearch:9200
      SPRING_DATA_MONGODB_URI: mongodb://mongo1:30001,mongo2:30002,mongo3:30003/daory
      KAFKA_SERVERURL: kafka:19092
      AWS_ACCESS_KEY_ID: "AKIAZHOHINJBQLQOSWUM"
      AWS_SECRET_ACCESS_KEY: "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"
      AWS_REGION: "us-east-2"
      DISCORD_CLIENT_SECRET: "test"
    networks:
      - default

  notifications-ws:
    build: ./notifications-ws
    ports:
      - "8090:8090"
    depends_on:
      - mongo1
      - kafka
      - zookeeper
      - redis
    environment:
      SPRING_ACTIVE_PROFILE: local
      SPRING_DATA_MONGODB_HOST: mongo1
      SPRING_DATA_MONGODB_URI: mongodb://mongo1:30001/daory
      KAFKA_SERVERURL: kafka:19092
    networks:
      - default

  # jobs:
  #   image: jobs:latest
  #   depends_on:
  #     - mongo1
  #     - redis
  #   environment:
  #     SPRING_ACTIVE_PROFILE: local
  #     SPRING_DATA_MONGODB_HOST: mongo1
  #     SPRING_DATA_MONGODB_URI: mongodb://mongo1:30001/daory
  #     INITIATE_ROLES: "false"
  #     INITIATE_GAMES: "false"
  #     INITIATE_TOKENS: "false"
  #   networks:
  #     - default