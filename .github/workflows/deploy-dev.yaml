name: Deploy To Dev Cluster
on:
  push:
    branches:
      - 'dev'


jobs:
  deploy:
    name: Build and deploy image to staging
    environment: staging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Extract Commit Hash
        shell: bash
        run: echo "##[set-output name=hash;]$(echo $(git rev-parse --short "$GITHUB_SHA"))"
        id: extract_commit

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: utxo-wallet
          IMAGE_TAG: dev-${{ steps.extract_commit.outputs.hash }}
        run: |
          # Display information for ECR
          echo "Build start $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          echo "Build start $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          # Build a Docker image and push it to ECR so that it can
          # be deployed to ECS.
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            .
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"
      - name: helm deploy
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DEV }}
        with:
          command: |
            helm upgrade --install utxo-wallet-service ./utxo-wallet-service \
              --set image.tag=dev-${{ steps.extract_commit.outputs.hash }},image.repository=${{ steps.login-ecr.outputs.registry }}/utxo-wallet,datadog.env=dev,secrets.objectName="dev/utxo-wallet-service" \
              --namespace utxo-wallet \
              --create-namespace \
              --wait
